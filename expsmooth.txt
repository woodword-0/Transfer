import pandas as pd
import numpy as np
from fbprophet import Prophet
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Sample data (replace with your own time series data)
# Example DataFrame structure:
# Index: monthly dates, Columns: product names, Values: sales or other metric
date_rng = pd.date_range(start='2022-03-01', periods=18, freq='M')
product_data = np.random.rand(18, 3)  # Replace with your actual data
product_df = pd.DataFrame(product_data, index=date_rng, columns=['ProductA', 'ProductB', 'ProductC'])

# Define forecasting parameters
forecast_horizon = 1  # Forecasting for one month ahead
window_size = 9       # Use the last 9 months for modeling

# Define target months (from January 2023 to December 2023, including forecast periods)
target_months = pd.date_range(start='2023-01-01', end='2023-12-01', freq='M')

# Add additional dates to the target_months for forecasting beyond December 2023
# For example, let's add forecasts for January 2024 and February 2024
additional_forecast_dates = pd.date_range(start='2024-01-01', end='2024-02-01', freq='M')
target_months = target_months.union(additional_forecast_dates)

# Initialize a list to store results
results = []

# Loop through products
for product in product_df.columns:
    product_series = product_df[product]
    
    # Extract data for modeling, starting from March 2022
    product_series = product_series.loc['2022-03-01':]
    
    # Loop through target months
    for target_month in target_months:
        # Select the last 9 months for modeling
        end_date = target_month - pd.DateOffset(months=1)
        start_date = end_date - pd.DateOffset(months=window_size-1)
        training_data = product_series.loc[start_date:end_date]
        
        # Fit a Holt-Winters (exponential smoothing) model
        exp_smooth_model = ExponentialSmoothing(training_data, seasonal='add', seasonal_periods=12)
        exp_smooth_fit = exp_smooth_model.fit()
        
        # Fit a Prophet model
        prophet_model = Prophet()
        prophet_df = pd.DataFrame({'ds': training_data.index, 'y': training_data.values})
        prophet_model.fit(prophet_df)
        
        # Make forecasts for both models
        exp_smooth_forecast = exp_smooth_fit.forecast(steps=forecast_horizon)
        prophet_future = prophet_model.make_future_dataframe(periods=forecast_horizon, freq='M')
        prophet_forecast = prophet_model.predict(prophet_future.tail(forecast_horizon))
        
        # Get the actual value for the target month if it exists, otherwise use None
        actual_value = product_series.loc[target_month] if target_month in product_series.index else None
        
        # Store results for both models for this product and target month
        results.append({'Product': product, 'TargetMonth': target_month, 'Actual': actual_value, 'ExpSmooth_Forecast': exp_smooth_forecast.values[0], 'Prophet_Forecast': prophet_forecast['yhat'].values[0]})

# Create a pandas DataFrame from the results
results_df = pd.DataFrame(results)

# Print the results DataFrame
print(results_df)
