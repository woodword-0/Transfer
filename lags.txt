from sklearn.pipeline import Pipeline, FeatureUnion
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import RidgeCV, LassoCV
from sklearn.ensemble import HistGradientBoostingRegressor, RandomForestRegressor
from sklearn.base import BaseEstimator, TransformerMixin
import numpy as np

# Create a custom transformer to add lag features
class LagFeatureAdder(BaseEstimator, TransformerMixin):
    def __init__(self, lag):
        self.lag = lag

    def fit(self, X, y=None):
        return self

    def transform(self, X):
        lagged_features = [X.shift(i).values for i in range(1, self.lag + 1)]
        lagged_features = np.vstack(lagged_features).T
        return lagged_features

# Assuming X_train and y_train are your training data
lag = 3  # Number of lag features to add
X_train_lagged = LagFeatureAdder(lag).transform(X_train)

# Define the models
models = [
    ('ridge', RidgeCV(alphas=(0.1, 1.0, 10.0))),
    ('hist_gradient_boosting', HistGradientBoostingRegressor()),
    ('random_forest', RandomForestRegressor()),
    ('lasso', LassoCV(alphas=(0.1, 1.0, 10.0)))
]

# Create a pipeline for lag feature addition, standardization, and modeling
lag_pipeline = Pipeline([
    ('lag_features', LagFeatureAdder(lag)),
    ('scaler', StandardScaler()),  # Standardize features if needed
    ('model', models)
])

# Fit the pipeline to your training data and perform predictions
lag_pipeline.fit(X_train, y_train)
y_pred = lag_pipeline.predict(X_test)
