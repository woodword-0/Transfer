import pandas as pd
import numpy as np
from statsmodels.tsa.holtwinters import ExponentialSmoothing

product_df = transpose

# Define forecasting parameters
forecast_horizon = 1  # Forecasting for one month ahead
window_size = 9       # Use the last 9 months for modeling

# Define target months (from January 2023 to September 2023)
target_months = transpose.iloc[transpose.index >= '2023-01-01'].index
additional_months = pd.date_range(start='2023-08-31', end='2023-10-31', freq='M')
target_months = target_months.union(additional_months)

# Initialize a list to store results
results = []

# Define a grid of alpha (smoothing level) values to search through
alpha_values = [0.2, 0.4, 0.6, 0.8]

# Loop through products
for product in product_df.columns:
    product_series = product_df[product]
    
    # Extract data for modeling, starting from March 2022
    product_series = product_series.loc['2022-03-01':]
    
    # Loop through target months
    for target_month in target_months:
        # Select the last 9 months for modeling
        end_date = target_month - pd.DateOffset(months=1)
        start_date = end_date - pd.DateOffset(months=window_size-1)
        training_data = product_series.loc[start_date:end_date]
        
        best_mse = float('inf')  # Initialize with a large value
        best_alpha = None
        
        # Iterate through alpha values and find the best-performing model
        for alpha in alpha_values:
            # Fit a Holt-Winters (exponential smoothing) model with the current alpha
            exp_smooth_model = ExponentialSmoothing(training_data, initialization_method='estimated', seasonal='add', seasonal_periods=12, trend='add', freq='M', alpha=alpha)
            exp_smooth_fit = exp_smooth_model.fit()
            
            # Make forecasts with the current model
            exp_smooth_forecast = exp_smooth_fit.forecast(steps=forecast_horizon)
            
            # Calculate Mean Squared Error (MSE)
            mse = ((exp_smooth_forecast - product_series[target_month])**2).mean()
            
            # Update the best model if the current one has a lower MSE
            if mse < best_mse:
                best_mse = mse
                best_alpha = alpha
        
        # Fit the best model with the selected alpha
        exp_smooth_model = ExponentialSmoothing(training_data, initialization_method='estimated', seasonal='add', seasonal_periods=12, trend='add', freq='M', alpha=best_alpha)
        exp_smooth_fit = exp_smooth_model.fit()
        
        # Make forecasts with the best model
        exp_smooth_forecast = exp_smooth_fit.forecast(steps=forecast_horizon)
        
        # Get the actual value for the target month if it exists, otherwise use None
        actual_value = product_series.loc[target_month] if target_month in product_series.index else None
        
        # Store results for the best model for this product and target month
        results.append({'Product': product, 'TargetMonth': target_month, 'Actual': actual_value, 'Forecast_Model3': exp_smooth_forecast.values[0]})

# Create a pandas DataFrame from the results
results_df2 = pd.DataFrame(results)

# Print the results DataFrame
print(results_df2)
