import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import Ridge, LassoCV
from sklearn.metrics import mean_squared_error
import numpy as np

# Read your CSV file into a DataFrame
df = pd.read_csv('your_data.csv')

# Convert 'Invoice Date' to datetime
df['Invoice Date'] = pd.to_datetime(df['Invoice Date'])

# Convert 'COGS Amount', 'Sales Amount' to float
df['COGS Amount'] = df['COGS Amount'].str.replace(',', '').astype(float)
df['Sales Amount'] = df['Sales Amount'].str.replace(',', '').astype(float)

# Split data into features and target
X = df.drop(['Sales Quantity'], axis=1)
y = df['Sales Quantity']

# Convert 'Product Name' to categorical and use one-hot encoding
X = pd.get_dummies(X, columns=['Product Name'], drop_first=True)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create date-based features
X_train['Year'] = X_train['Invoice Date'].dt.year
X_train['Month'] = X_train['Invoice Date'].dt.month
X_train['Day'] = X_train['Invoice Date'].dt.day

X_test['Year'] = X_test['Invoice Date'].dt.year
X_test['Month'] = X_test['Invoice Date'].dt.month
X_test['Day'] = X_test['Invoice Date'].dt.day

# Train and evaluate models
models = {
    'Random Forest': RandomForestRegressor(),
    'Ridge Regression': Ridge(),
    'Boosted Tree': GradientBoostingRegressor(),
    'LassoCV': LassoCV()
}

for model_name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"{model_name} - MSE: {mse:.2f}")

# Make predictions for the next 30 days and the following 30 days
last_date = df['Invoice Date'].max()
next_30_days = pd.date_range(start=last_date, periods=30, freq='D')
next_60_days = pd.date_range(start=last_date + pd.DateOffset(days=30), periods=30, freq='D')

# Create a DataFrame for predictions
future_dates = np.concatenate((next_30_days, next_60_days))
future_data = pd.DataFrame({'Invoice Date': future_dates})
future_data = pd.get_dummies(future_data, columns=['Product Name'], drop_first=True)

# Add date-based features
future_data['Year'] = future_data['Invoice Date'].dt.year
future_data['Month'] = future_data['Invoice Date'].dt.month
future_data['Day'] = future_data['Invoice Date'].dt.day

# Predict using the chosen model (e.g., RandomForestRegressor)
chosen_model = RandomForestRegressor()
chosen_model.fit(X, y)
future_predictions = chosen_model.predict(future_data)

# Create a DataFrame with predictions and dates
predictions_df = pd.DataFrame({'Date': future_dates, 'Predicted_Sales': future_predictions})

print(predictions_df)
